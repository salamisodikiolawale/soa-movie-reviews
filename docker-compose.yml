version: "3.9"
services:

  reverse-proxy:
    image: traefik:v2.8
    command: 
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      #- ./traefik.toml:/traefik.toml
    networks:
      - serviceNetwork

  crud_service:
    build: ./microservices/CrudMovieService
    # container_name: crud
    ports:
      - "3000:3000"
    volumes:
      - type: bind
        source: ./microservices/CrudMovieService
        target: /src/app
    labels:
     - "traefik.http.routers.crud_service.entrypoints=web" 
     - "traefik.http.routers.crud_service.rule=Host(`crud_service.localhost`)"
     - "traefik.http.services.crud_service.loadbalancer.server.port=3000"
    networks:
      - serviceNetwork

  client:
    build: ./frontend
    ports:
      - "4000:3000"
    volumes:
      - './frontend:/src/app'
      - '/src/app/node_modules'
    networks:
      - serviceNetwork

  email_service:
    build: ./microservices/EmailService
    ports:
      - "3004:3004"
    volumes:
      - type: bind
        source: ./microservices/EmailService
        target: /src/app
    labels:
     - "traefik.http.routers.email_service.entrypoints=web" 
     - "traefik.http.routers.email_service.rule=Host(`email_service.localhost`)"
     - "traefik.http.services.email_service.loadbalancer.server.port=3004"
    networks:
      - serviceNetwork

  # review_service:
  #   build: ./microservices/ReviewService
  #   ports:
  #     - "3001:3001"
  #   networks:
  #     - serviceNetwork

  # search_service:
  #   build: ./microservices/SearchService
  #   ports:
  #     - "3002:3002"
  #   networks:
  #     - serviceNetwork

  # auth_service:
  #   build: ./microservices/AuthService
  #   ports:
  #     - "3003:3003"
  #   networks:
  #     - serviceNetwork


networks:
  serviceNetwork:
    driver: bridge


# networks:
#   serviceNetwork:
#     driver: bridge
#   baseNetwork: 